= Yacaph

This captcha generator is based on the very fine work of Eric Methot (http://ericmethot.com/code/ruby/ruby/yacaph.html) all credit and thanks should go to him.

This fork works with Rails 3.0 or later and allows you to specify a file type for captcha image generation (png or gif).

== Installation and usage
Using Captcha is a five step process

1. Install ImageMagick or GraphicsMagick
2. Declare dependency on yacaph in your Gemfile
3. Generate a bunch of images off-line
4. Use the helper method(s)
5. Validate user input

The plugin has been tested on Arch Linux using ImageMagick @6.7.1.0 and the rmagick gem.


=== Install ImageMagick or GraphicsMagick

This depends on your operating system. On Arch Linux simply use the package manager:
    pacman -S --needed imagemagick

For other systems you can follow the instructions on rmagick site: http://rmagick.rubyforge.org/install-faq.html


=== Declare dependency on yacaph in your Gemfile

Add the following line in your Gemfile:
    gem 'yacaph'

or, if you want to use bleeding edge version directly from this repository:
    gem 'yacaph', :git => 'git://github.com/cameel/captcha.git'

Then run 
    bundle install


=== Generate a bunch of images off-line

The reason why you don't need to generate images on the fly is that they have been generated in advance and all you do is pick one at random. This is done by running the following rake task, this takes a while:

    rake captcha:generate COUNT=250

This will create the '/public/system/captcha' directory if it doesn't already exist and put 250 randomly generated captcha images in it.

Yacaph stores salted hashes of the captcha codes in file names. This means that you must regenerate the images whenever the salt changes.

Your application's secret token (config.secret_token) is by default used as a salt. It can be overridden by defining a global constant named CAPTCHA_SALT e.g. in your application.rb. Its value, preferably a long, random string, will be used instead. You can use a blank salt, but it's highly unrecommended since it makes your captcha easy to break without even analyzing the images.

You can specify the following parameters when running the rake task:

    COUNT          - the number of images to generate, default 3
    IMAGE_HEIGHT   - the height of the captcha image in pixels, default 50
    IMAGE_WIDTH    - the width of the captcha image in pixels, default 260
    CAPTCHA_LENGTH - the number of characters in the captcha, default 5
    FILE_FORMAT    - the file type of the captcha image (png or gif), default png
    FONT_SIZE      - the font size in points, default 44)


=== Use the helper method(s)

In your forms all you need to do is:

    <%= captcha_block %>

And add a little bit of CSS styling to get a nice looking captcha validation text field and image. If you don't like the way it's setup then use the other helper methods (see captcha_helper.rb), which are more granular.


=== Validate user input

In your controller, you will need to do the following:

    PostController < ApplicationController
      validates_captcha

      def create
        ...
        if captcha_validated?
          ...
        else
          ...
        end
      end
    end

That's it.


== Yacaph and Cells

You can put a catpcha inside a cell view just like in normal view. Just remember to use validates_captcha both in the cell and in the controller where the cell is used. Validation must be done in the controller.

Copyright (c) 2008 Zendesk, released under the MIT license
